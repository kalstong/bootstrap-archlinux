#!/usr/bin/ash
# vim:ft=sh

read_from_usb () {
	_usb_disk="/dev/disk/by-id/usb-General_USB_Flash_Disk_7911020000213736-0:0"
	while [ ! -L "$_usb_disk" ]; do usleep $((1000 * 100)); done

	dd if="$_usb_disk" of=/tmp/keyfile \
		skip=$((640 * 1024 * 1024 + 1024 * 0)) \
		ibs=1 count=1024 status=none

	kill -USR1 $$ 2> /dev/null
}

read_from_kbd () {
	read pwd && [ -n "$pwd" ] &&
		printf "$pwd" > /tmp/keyfile
}

get_keyfile () {
	(read_from_usb) &
	pid_rfu=$!

	printf "-> You know what to do ...\n"

	trap "kill -INT $$ 2> /dev/null" USR1
	trap "" INT

	stty -echo; read_from_kbd; stty echo

	kill $pid_rfu 2> /dev/null
}

decrypt_partitions () {
	printf "-> Decrypting root ... "
	cryptsetup --key-file /tmp/keyfile \
		--allow-discards \
		--perf-no_read_workqueue \
		--perf-no_write_workqueue \
		open /dev/nvme0n1p4 root &&
	echo "[OK]" || { echo "-> Failed to decrypt root."; return 1; }

	return 0;
}

run_hook () {
	modprobe -a -q dm-crypt >/dev/null 2>&1
	modprobe loop
	[ "${quiet}" = "y" ] && CSQUIET=">/dev/null"

	mkdir -p /run/cryptsetup

	while true; do
		get_keyfile
		[ -s /tmp/keyfile ] && decrypt_partitions && break
	done

	shred --iterations=1 --random-source=/dev/urandom -u --zero /tmp/keyfile
	return 0
}

# Documentation: https://pkg.go.dev/github.com/gokcehan/lf
# Repository: https://github.com/gokcehan/lf
# Wiki: https://github.com/gokcehan/lf/wiki


cmd archive ${{
	set -f
	archive_ext="${1##*.}"
	archive_name="${1%.*}"

	if [ "$archive_ext" = "7z" ]; then
		for item in $fx
		do
			cd $(dirname "$item") && 7z a "$PWD/$1" ./$(basename "$item")
		done

	elif [ "$archive_ext" = "tar" ]; then
		for item in $fx
		do
			cd $(dirname "$item") && tar --update --file \
				"$PWD/$1" $(basename "$item")
		done

	elif [ "$archive_ext" = "tar.bz2" ] || [ "$archive_ext" = "tbz2" ]; then
		for item in $fx
		do
			cd $(dirname "$item") && tar --update --file \
				"$PWD/$archive_name".tar $(basename "$item")
		done
		pbzip2 --stdout "$PWD/$archive_name".tar > "$PWD/$1"
		rm "$PWD/$archive_name".tar

	elif [ "$archive_ext" = "tar.gz" ] || [ "$archive_ext" = "tgz" ]; then
		for item in $fx
		do
			cd $(dirname "$item") && tar --update --file \
				"$PWD/$archive_name".tar $(basename "$item")
		done
		pigz --stdout "$PWD/$archive_name".tar > "$PWD/$1"
		rm "$PWD/$archive_name".tar

	elif [ "$archive_ext" = "tar.xz" ] || [ "$archive_ext" = "txz" ]; then
		for item in $fx
		do
			cd $(dirname "$item") && tar --update --file \
				"$PWD/$archive_name".tar $(basename "$item")
		done
		xz --threads=0 --stdout "$PWD/$archive_name".tar > "$PWD/$1"
		rm "$PWD/$archive_name".tar

	elif [ "$archive_ext" = "tar.zst" ] || [ "$archive_ext" = "txz" ]; then
		for item in $fx
		do
			cd $(dirname "$item") && tar --update --file \
				"$PWD/$archive_name".tar $(basename "$item")
		done
		zstd --threads=0 --stdout "$PWD/$1".tar > "$PWD/$1"
		rm "$PWD/$archive_name".tar

	elif [ "$archive_ext" = "zip" ]; then
		for item in $fx
		do
			cd $(dirname "$item") && zip --recurse-path \
				"$PWD/$1" ./$(basename "$item")
		done
	fi
}}

cmd bookmark_add ${{
	echo "$f" >> "$LF_BOOKMARKS_PATH"
	lf -remote "send echo bookmarked: $f"
}}

cmd bookmark_jump ${{
	set -f
	res="$(cat "$LF_BOOKMARKS_PATH" | fzf --with-nth=1)"
	lf -remote "send $id cd \"$(eval echo $res)\""
}}

cmd fzf_cd ${{
	set -f
	sel=$(fd --exclude '.git/' --hidden --strip-cwd-prefix --type d --type f | fzf)
	if [ -d "$sel" ]; then
		lf -remote "send $id cd \"$sel\""
	else
		lf -remote "send $id select \"$sel\""
	fi
}}

cmd fzf_search ${{
	RG_PREFIX="rg --color=always --column --hidden --line-number "\
"--no-heading --no-mmap --smart-case --threads 2 "\
"--glob '!{.git,node_modules}/*' "
	FZF_DEFAULT_COMMAND="${RG_PREFIX} ''"

	res=`fzf --ansi --bind "change:reload:$RG_PREFIX {q} || true" --delimiter ':' --nth '2..' --reverse --layout=reverse`
	file=$(echo "$res" | awk -F ':' '{ print $1}')
	line=$(echo "$res" | awk -F ':' '{ print $2}')

	if [ -n "$file" ] && [ -n "$line" ]; then
		name=$(basename "$file")
		[[ $name = .* ]] && lf -remote "send $id set hidden"
		lf -remote "send $id select \"$file\""
		nvim "+${line}" "${file}"

	elif [ -n "$file" ]; then
		name=$(basename "$file")
		[[ $name = .* ]] && lf -remote "send $id set hidden"
		lf -remote "send $id select \"$file\""
	fi
}}

cmd paste $cp-p --lf-paste $id

cmd cd_quit ${{
	echo "$PWD" > /tmp/lfcd &&
	lf -remote "send $id quit"
}}

cmd cd_selection ${{
	[ -d "$f" ] &&
		lf -remote "send $id cd \"$f\""
		lf -remote "send $id \$$SHELL"
}}

cmd cd_selection_quit ${{
	[ -d "$f" ] &&
		echo "$f" > /tmp/lfcd &&
		lf -remote "send $id quit"
}}


map . set hidden!
map - jump-prev
map ; push :fzf_cd<enter>
map a push :archive<space>
map b mark-load
map q quit
map s push :fzf_search<enter>
map x delete
map o push :cd_selection<enter>
map B push :bookmark_jump<enter>
map O push :cd_selection_quit<enter>
map T push :bookmark_add<enter>
map W push :cd_quit<enter>


set icons
set preview
set previewer lfpreview
set promptfmt "\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m"
set ratios 2:4
